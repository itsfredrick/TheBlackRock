generator client { provider = "prisma-client-js" }
datasource db { provider = "postgresql"; url = env("DATABASE_URL") }

enum Role { founder expert investor admin }
enum ProjectStage { idea planning prototype fundraising }
enum Visibility { private investor_preview public_showcase }
enum MilestoneStatus { planned active done blocked }
enum TaskStatus { todo doing done blocked }
enum InviteStatus { invited accepted declined hired }
enum QuoteStatus { requested received shortlisted rejected }
enum InvestorAccessStatus { requested approved rejected revoked }

model User {
  id                 String    @id @default(uuid())
  email              String    @unique
  passwordHash       String
  role               Role
  name               String?
  company            String?
  country            String?
  onboardingComplete Boolean   @default(false)
  status             String?
  createdAt          DateTime  @default(now())
  lastLoginAt        DateTime?

  projects  Project[] @relation("UserProjects")
  messages  Message[]
  AuditLog  AuditLog[]
  Expert    Expert?
  Investor  Investor?
}

model Project {
  id            String         @id @default(uuid())
  ownerId       String
  owner         User           @relation("UserProjects", fields: [ownerId], references: [id])
  title         String
  summary       String?
  problem       String?
  solution      String?
  targetMarket  String?
  constraints   String?
  stage         ProjectStage   @default(idea)
  aiPlanJson    Json?
  aiBudgetJson  Json?
  aiRoadmapJson Json?
  successScore  Float?
  visibility    Visibility     @default(private)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  milestones Milestone[]
  tasks      Task[]
  shortlists ProjectExpertShortlist[]
  rfqQuotes  SupplierQuote[]
  accessReqs InvestorAccessRequest[]
  messages   Message[]
  reports    Report[]
}

model Milestone {
  id           String          @id @default(uuid())
  projectId    String
  project      Project         @relation(fields: [projectId], references: [id])
  title        String
  description  String?
  startDate    DateTime?
  dueDate      DateTime?
  status       MilestoneStatus @default(planned)
  ownerId      String?
  owner        User?           @relation(fields: [ownerId], references: [id])
  aiGenerated  Boolean         @default(false)

  tasks Task[]
}

model Task {
  id            String      @id @default(uuid())
  createdAt     DateTime    @default(now())
  milestoneId   String?
  milestone     Milestone?  @relation(fields: [milestoneId], references: [id])
  projectId     String
  project       Project     @relation(fields: [projectId], references: [id])
  title         String
  description   String?
  status        TaskStatus  @default(todo)
  assigneeId    String?
  assignee      User?       @relation(fields: [assigneeId], references: [id])
  estimateHours Float?
  actualHours   Float?
}

model Expert {
  id               String   @id @default(uuid())
  userId           String   @unique
  user             User     @relation(fields: [userId], references: [id])
  categories       String[]        // arrays as per SOW
  skills           String[]
  hourlyRate       Float?
  portfolioLinks   String[]
  location         String?
  availability     String?
  performanceScore Float?
  profileVerified  Boolean  @default(false)
  events           ExpertPerformanceEvent[]
  shortlists       ProjectExpertShortlist[]
}

model ExpertPerformanceEvent {
  id        String   @id @default(uuid())
  expertId  String
  expert    Expert   @relation(fields: [expertId], references: [id])
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id])
  eventType String
  weight    Float?
  metadata  Json?
  createdAt DateTime @default(now())
}

model ProjectExpertShortlist {
  id        String       @id @default(uuid())
  createdAt DateTime     @default(now())
  projectId String
  project   Project      @relation(fields: [projectId], references: [id])
  expertId  String
  expert    Expert       @relation(fields: [expertId], references: [id])
  reason    String?
  rank      Float?
  status    InviteStatus @default(invited)
}

model Supplier {
  id           String   @id @default(uuid())
  companyName  String
  category     String
  location     String?
  leadTimeDays Int?
  minOrder     Int?
  notes        String?
  rating       Float?
  verified     Boolean  @default(false)
  quotes       SupplierQuote[]
}

model SupplierQuote {
  id             String       @id @default(uuid())
  projectId      String
  project        Project      @relation(fields: [projectId], references: [id])
  supplierId     String
  supplier       Supplier     @relation(fields: [supplierId], references: [id])
  rfqJson        Json?
  quoteJson      Json?
  status         QuoteStatus  @default(requested)
  attachmentUrls String[]
}

model Investor {
  id              String   @id @default(uuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id])
  focusAreas      String[]
  checkSizeMin    Float?
  checkSizeMax    Float?
  stageFocus      String[]
  geographicFocus String[]
  ndaOnFile       Boolean  @default(false)
  approved        Boolean  @default(false)
  accessRequests  InvestorAccessRequest[]
}

model InvestorAccessRequest {
  id         String               @id @default(uuid())
  projectId  String
  project    Project              @relation(fields: [projectId], references: [id])
  investorId String
  investor   Investor             @relation(fields: [investorId], references: [id])
  status     InvestorAccessStatus @default(requested)
  grantedAt  DateTime?
}

model Message {
  id          String   @id @default(uuid())
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id])
  senderId    String
  sender      User     @relation(fields: [senderId], references: [id])
  body        String
  attachments String[]
  createdAt   DateTime @default(now())
}

model Report {
  id                 String   @id @default(uuid())
  projectId          String
  project            Project  @relation(fields: [projectId], references: [id])
  periodStart        DateTime?
  periodEnd          DateTime?
  summary            String?
  budgetVsActualJson Json?
  riskFlags          String[]
  pdfUrl             String?
  createdAt          DateTime @default(now())
}

model AuditLog {
  id         String   @id @default(uuid())
  userId     String?
  user       User?    @relation(fields: [userId], references: [id])
  action     String
  objectType String
  objectId   String?
  metadata   Json?
  createdAt  DateTime @default(now())
}

model SystemSetting {
  key       String   @id
  json      Json
  updatedAt DateTime @updatedAt
}
